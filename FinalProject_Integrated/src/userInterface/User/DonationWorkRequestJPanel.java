/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userInterface.User;

import Business.*;
import Business.BeingHuman.UserOrganization;
import Business.Network.*;
import Business.Enterprise.Enterprise;
import Business.Distance.*;
import Business.GeoLocation.*;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.LabTestWorkRequest;
import java.awt.CardLayout;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.URL;
import java.net.URLConnection;
import java.net.URLEncoder;
import java.util.Collections;
import java.util.Comparator;
import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import org.codehaus.jackson.map.ObjectMapper;

/**
 *
 * @author Panchi
 */
public class DonationWorkRequestJPanel extends javax.swing.JPanel {

    /**
     * Creates new form DonationWorkRequestJPanel
     */
    JPanel container;
    DistanceDirectory distanceDirectory;
    EcoSystem ecoSystem;
    UserAccount userAccount;
    Enterprise enterprise;
    UserOrganization userOrg;

    public DonationWorkRequestJPanel(JPanel userBloodProcessPanel, UserAccount userAccount, UserOrganization organization, Enterprise enterprise, EcoSystem ecosystem) {
        initComponents();
        this.ecoSystem = ecosystem;
        this.container = userBloodProcessPanel;
        this.userAccount = userAccount;
        this.enterprise = enterprise;
        this.userOrg = organization;
         ImageIcon img = new ImageIcon(getClass().getResource("/images/donate.gif"));
         lblImage.setIcon(img);
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jComboBox1 = new javax.swing.JComboBox<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        locationTxt = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        locationJTable = new javax.swing.JTable();
        submitBtn = new javax.swing.JButton();
        locationImg = new javax.swing.JLabel();
        searchBtn = new javax.swing.JButton();
        lblImage = new javax.swing.JLabel();

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jScrollPane2.setPreferredSize(new java.awt.Dimension(837, 1004));

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setPreferredSize(new java.awt.Dimension(833, 1000));

        jLabel1.setText("Enter You Location:");

        locationTxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                locationTxtActionPerformed(evt);
            }
        });

        locationJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Location", "Distance"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(locationJTable);

        submitBtn.setBackground(new java.awt.Color(255, 51, 51));
        submitBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/process.jpg"))); // NOI18N
        submitBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitBtnActionPerformed(evt);
            }
        });

        locationImg.setAutoscrolls(true);

        searchBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/search.jpg"))); // NOI18N
        searchBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(21, 21, 21)
                                .addComponent(locationImg, javax.swing.GroupLayout.PREFERRED_SIZE, 500, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(37, 37, 37)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 424, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabel1)
                                .addGap(18, 18, 18)
                                .addComponent(locationTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 261, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(searchBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(41, 41, 41)
                        .addComponent(lblImage, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(182, 182, 182)
                        .addComponent(submitBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(83, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(searchBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(34, 34, 34)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(locationTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1))))
                .addGap(19, 19, 19)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(locationImg, javax.swing.GroupLayout.PREFERRED_SIZE, 374, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(63, 63, 63)
                        .addComponent(lblImage, javax.swing.GroupLayout.PREFERRED_SIZE, 222, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(submitBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(317, Short.MAX_VALUE))
        );

        jScrollPane2.setViewportView(jPanel1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 694, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void locationTxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_locationTxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_locationTxtActionPerformed

    private void searchBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchBtnActionPerformed
        // TODO add your handling code here:
        String curLatitude = null, curLongitude = null;
        double distance;
        String location = locationTxt.getText();
        if (location.equalsIgnoreCase("")) {
            JOptionPane.showMessageDialog(null, "Please enter your address");
            return;
        } else {
            GoogleResponse res;
            try {
                res = convertToLatLong(location);
                if (res.getStatus().equals("OK")) {
                    for (Result result : res.getResults()) {

                        curLatitude = result.getGeometry().getLocation().getLat();
                        curLongitude = result.getGeometry().getLocation().getLng();
                        /* System.out.println("Lattitude of address is :"  +result.getGeometry().getLocation().getLat());
    System.out.println("Longitude of address is :" + result.getGeometry().getLocation().getLng());
    System.out.println("Location is " + result.getGeometry().getLocation_type());*/
                    }
                    distanceDirectory = new DistanceDirectory();
                    for (Network network : ecoSystem.getNetworkList()) {

                        String latitude = network.getNetworkAddress().getLatitude();
                        String longitude = network.getNetworkAddress().getLongitude();

                        distance = distance(Double.parseDouble(curLatitude), Double.parseDouble(curLongitude), Double.parseDouble(latitude), Double.parseDouble(longitude), "M");
                        Distance dist = distanceDirectory.addDistance();
                        dist.setLocation(network.getNetworkAddress().getAddress());
                        dist.setDistance(distance);

                    }

                    //Collections.sort(enterprise.getDistanceDirectory().getDistanceDirectory(),new Distance());
                    Collections.sort(distanceDirectory.getDistanceDirectory(), new Comparator<Distance>() {
                        @Override
                        public int compare(Distance o1, Distance o2) {
                            return new Double(o1.getDistance()).compareTo(o2.getDistance());
                        }
                    });

                    try {
                        String latitude = curLatitude;
                        String longitude = curLongitude;

                        String imageUrl = "https://maps.googleapis.com/maps/api/staticmap?size=700x700&scale=2&maptype=roadmap";

                        for (Network network : ecoSystem.getNetworkList()) {
                            String[] fruits = {"blue", "green", "red", "yellow", "pink"};
                            String random = (fruits[new Random().nextInt(fruits.length)]);
                            imageUrl = imageUrl + "&markers=size:mid%7Ccolor:" + random + "%7Clabel:S%7C" + network.getNetworkAddress().getLatitude() + "," + network.getNetworkAddress().getLongitude();

                        }

//imageUrl=url1;
                        String destinationFile = "image.jpg";
// read the map image from Google
// then save it to a local file: image.jpg
//
                        URL url = new URL(imageUrl);
                        InputStream is = url.openStream();
                        OutputStream os = new FileOutputStream(destinationFile);
                        byte[] b = new byte[2048];
                        int length;
                        while ((length = is.read(b)) != -1) {
                            os.write(b, 0, length);
                        }
                        is.close();
                        os.close();
                    } catch (IOException e) {
                        e.printStackTrace();
                        System.exit(1);
                    }
// create a GUI component that loads the image: image.jpg
//
                    ImageIcon imageIcon = new ImageIcon((new ImageIcon("image.jpg"))
                            .getImage().getScaledInstance(630, 600,
                                    java.awt.Image.SCALE_SMOOTH));
                    locationImg.setIcon(imageIcon);
// show the GUI window

                    populateTable();
                } else {
                    JOptionPane.showMessageDialog(null, "Please enter a valid address");
                    System.out.println(res.getStatus());
                }
            } catch (IOException ex) {
                Logger.getLogger(DonationWorkRequestJPanel.class.getName()).log(Level.SEVERE, null, ex);
            }

        }
    }//GEN-LAST:event_searchBtnActionPerformed

    private void submitBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitBtnActionPerformed
        // TODO add your handling code here:
        int selectedRow = locationJTable.getSelectedRow();

        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please select a row");
            return;
        }

        Distance distance = (Distance) locationJTable.getValueAt(selectedRow, 0);

        RequestLabTestJPanel requestLabTestJPanel = new RequestLabTestJPanel(container, ecoSystem, userAccount, enterprise, distance.getLocation());
        container.add("RequestLabTestJPanel", requestLabTestJPanel);
        CardLayout layout = (CardLayout) container.getLayout();
        layout.next(container);

    }//GEN-LAST:event_submitBtnActionPerformed
    private void populateTable() {

        DefaultTableModel model = (DefaultTableModel) locationJTable.getModel();

        model.setRowCount(0);

        for (Distance distance : distanceDirectory.getDistanceDirectory()) {
            Object[] row = new Object[2];
            row[0] = distance;
            row[1] = distance.getDistance();

            model.addRow(row);
        }
    }

    public GoogleResponse convertToLatLong(String fullAddress) throws IOException {

        /*
   * Create an java.net.URL object by passing the request URL in
   * constructor. Here you can see I am converting the fullAddress String
   * in UTF-8 format. You will get Exception if you don't convert your
   * address in UTF-8 format. Perhaps google loves UTF-8 format. :) In
   * parameter we also need to pass "sensor" parameter. sensor (required
   * parameter) — Indicates whether or not the geocoding request comes
   * from a device with a location sensor. This value must be either true
   * or false.
         */
        String URL = "https://maps.googleapis.com/maps/api/geocode/json";
        URL url = new URL(URL + "?address="
                + URLEncoder.encode(fullAddress, "UTF-8") + "&sensor=false");
        // Open the Connection
        URLConnection conn = url.openConnection();

        InputStream in = conn.getInputStream();
        ObjectMapper mapper = new ObjectMapper();
        GoogleResponse response = (GoogleResponse) mapper.readValue(in, GoogleResponse.class);
        in.close();
        return response;

    }

    private double distance(double lat1, double lon1, double lat2, double lon2, String unit) {
        double theta = lon1 - lon2;
        double dist = Math.sin(deg2rad(lat1)) * Math.sin(deg2rad(lat2)) + Math.cos(deg2rad(lat1)) * Math.cos(deg2rad(lat2)) * Math.cos(deg2rad(theta));
        dist = Math.acos(dist);
        dist = rad2deg(dist);
        dist = dist * 60 * 1.1515;
        if (unit == "K") {
            dist = dist * 1.609344;
        } else if (unit == "N") {
            dist = dist * 0.8684;
        }

        return (dist);
    }

    /*:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::*/
 /*::	This function converts decimal degrees to radians						 :*/
 /*:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::*/
    private double deg2rad(double deg) {
        return (deg * Math.PI / 180.0);
    }

    /*:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::*/
 /*::	This function converts radians to decimal degrees						 :*/
 /*:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::*/
    private double rad2deg(double rad) {
        return (rad * 180 / Math.PI);
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblImage;
    private javax.swing.JLabel locationImg;
    private javax.swing.JTable locationJTable;
    private javax.swing.JTextField locationTxt;
    private javax.swing.JButton searchBtn;
    private javax.swing.JButton submitBtn;
    // End of variables declaration//GEN-END:variables
}
