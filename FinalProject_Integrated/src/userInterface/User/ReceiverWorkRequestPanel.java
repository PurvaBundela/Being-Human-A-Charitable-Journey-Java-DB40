/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userInterface.User;

import Business.BeingHuman.UserOrganization;
import Business.BloodDonation.BloodBank;
import Business.BloodDonation.BloodSpecification;
import Business.Distance.Distance;
import Business.Distance.DistanceDirectory;
import Business.EcoSystem;
import Business.Enterprise.BloodEnterprise;
import Business.Enterprise.Enterprise;
import Business.GeoLocation.GoogleResponse;
import Business.GeoLocation.Result;
import Business.Network.Network;
import Business.Organization.Organization;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.BloodBankAssistantWorkRequest;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.URL;
import java.net.URLConnection;
import java.net.URLEncoder;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.Map;
import java.util.Random;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import org.codehaus.jackson.map.ObjectMapper;

/**
 *
 * @author palakagrawal
 */
public class ReceiverWorkRequestPanel extends javax.swing.JPanel {

    JPanel userBloodProcessPanel;
    Organization org;
    Enterprise enterprise;
    UserAccount userAccount;
    EcoSystem system;
    DistanceDirectory distanceDirectory;
    String loc;
    int count;

    /**
     * Creates new form ReceiverWorkRequestPanel
     */
    public ReceiverWorkRequestPanel(JPanel userBloodProcessPanel, UserAccount userAccount, UserOrganization organization, Enterprise enterprise, EcoSystem ecosystem) {
        initComponents();
        this.userBloodProcessPanel = userBloodProcessPanel;
        this.userAccount = userAccount;
        this.org = organization;
        this.enterprise = enterprise;
        this.system = ecosystem;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        locationJTable = new javax.swing.JTable();
        locationImg = new javax.swing.JLabel();
        submitBtn = new javax.swing.JButton();
        receiverTitleLabel = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        quantityTxt = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        msgTxt = new javax.swing.JTextField();
        emergencyButton = new javax.swing.JButton();
        bloodGroupComboBox = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        searchBtn = new javax.swing.JButton();
        locationTxt = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();

        setPreferredSize(new java.awt.Dimension(900, 1400));

        jScrollPane2.setPreferredSize(new java.awt.Dimension(900, 1404));

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setPreferredSize(new java.awt.Dimension(762, 1400));

        jScrollPane1.setPreferredSize(new java.awt.Dimension(500, 300));

        locationJTable.setForeground(new java.awt.Color(255, 102, 102));
        locationJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Location", "Distance", "Blood Group", "Quantity", "Availability"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(locationJTable);

        locationImg.setAutoscrolls(true);

        submitBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/process.jpg"))); // NOI18N
        submitBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitBtnActionPerformed(evt);
            }
        });

        receiverTitleLabel.setFont(new java.awt.Font("Bradley Hand", 1, 24)); // NOI18N
        receiverTitleLabel.setForeground(new java.awt.Color(255, 51, 51));
        receiverTitleLabel.setText("Receive Blood Here");

        jLabel2.setFont(new java.awt.Font("Bradley Hand", 1, 14)); // NOI18N
        jLabel2.setText("Quantity:");

        quantityTxt.setFont(new java.awt.Font("Bradley Hand", 1, 14)); // NOI18N
        quantityTxt.setForeground(new java.awt.Color(255, 102, 102));

        jLabel3.setFont(new java.awt.Font("Bradley Hand", 1, 14)); // NOI18N
        jLabel3.setText("Message");

        msgTxt.setFont(new java.awt.Font("Bradley Hand", 1, 14)); // NOI18N
        msgTxt.setForeground(new java.awt.Color(255, 102, 102));

        emergencyButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/emergency_1.jpeg"))); // NOI18N
        emergencyButton.setEnabled(false);
        emergencyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                emergencyButtonActionPerformed(evt);
            }
        });

        bloodGroupComboBox.setBackground(new java.awt.Color(255, 102, 102));
        bloodGroupComboBox.setFont(new java.awt.Font("Bradley Hand", 1, 14)); // NOI18N
        bloodGroupComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "A+", "A-", "B+", "B-", "AB+", "AB-", "O+", "O-" }));
        bloodGroupComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bloodGroupComboBoxActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Bradley Hand", 1, 14)); // NOI18N
        jLabel4.setText("Blood Group");

        jLabel5.setFont(new java.awt.Font("Bradley Hand", 1, 14)); // NOI18N
        jLabel5.setText("Search");

        searchBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/search.jpg"))); // NOI18N
        searchBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchBtnActionPerformed(evt);
            }
        });

        jLabel1.setBackground(new java.awt.Color(255, 102, 102));
        jLabel1.setFont(new java.awt.Font("Bradley Hand", 1, 14)); // NOI18N
        jLabel1.setText("Find available blood group available at your nearest location, to receive blood");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(144, 144, 144)
                        .addComponent(jLabel1))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addGap(93, 93, 93)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 641, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                            .addGap(0, 0, 0)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                    .addComponent(jLabel4)
                                    .addGap(18, 18, 18)
                                    .addComponent(bloodGroupComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(31, 31, 31)
                                    .addComponent(jLabel5)
                                    .addGap(18, 18, 18)
                                    .addComponent(locationTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 253, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(44, 44, 44)
                                    .addComponent(searchBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(locationImg, javax.swing.GroupLayout.PREFERRED_SIZE, 550, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                            .addComponent(jLabel2)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                .addGroup(jPanel1Layout.createSequentialGroup()
                                                    .addGap(6, 6, 6)
                                                    .addComponent(submitBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addGap(131, 131, 131)
                                                    .addComponent(emergencyButton, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addGroup(jPanel1Layout.createSequentialGroup()
                                                    .addComponent(quantityTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addGap(18, 18, 18)
                                                    .addComponent(jLabel3)
                                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                    .addComponent(msgTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                                    .addGap(33, 33, 33))))))
                .addGap(200, 200, 200))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(240, 240, 240)
                .addComponent(receiverTitleLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(receiverTitleLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(searchBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(31, 31, 31)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(locationTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel5))
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(bloodGroupComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addGap(24, 24, 24)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(locationImg, javax.swing.GroupLayout.PREFERRED_SIZE, 355, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(msgTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(quantityTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(submitBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(emergencyButton, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(623, 623, 623))
        );

        jScrollPane2.setViewportView(jPanel1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 852, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(42, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 836, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(558, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void submitBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitBtnActionPerformed
        int availableOquantity = 0;
        HashMap<String, Integer> availableNetworkForO = new HashMap<>();
        emergencyButton.setEnabled(false);
        submitBtn.setEnabled(true);
        String quant = quantityTxt.getText();
        String msg1 = msgTxt.getText();
        if (quant.equalsIgnoreCase("") || msg1.equalsIgnoreCase("")) {
            JOptionPane.showMessageDialog(null, "Please Enter the value of Message and quantity");
            return;
        } else {

            int selectedRow = locationJTable.getSelectedRow();

            if (selectedRow < 0) {
                JOptionPane.showMessageDialog(null, "Please select a row");
            } else {
                //String bloodType = (String) locationJTable.getValueAt(selectedRow, 2);
                int availableQuantity = (Integer) locationJTable.getValueAt(selectedRow, 3);
                String loc = (String) locationJTable.getValueAt(selectedRow, 0);
                int userRequiredQuantity = Integer.parseInt(quantityTxt.getText());
                if (userRequiredQuantity <= 2) {
                    for (Network network : system.getNetworkList()) {
                        availableOquantity = 0;
                        for (BloodSpecification bs : network.getBloodBank().getBloodList()) {
                            if (bs.getBloodGroup().equalsIgnoreCase("O-")) {
                                availableOquantity++;
                            }
                        }
                        if (availableOquantity >= 1) {
                            availableNetworkForO.put(network.getNetworkAddress().getAddress(), availableOquantity);
                        }
                    }
                    Set<Map.Entry<String, Integer>> set1 = availableNetworkForO.entrySet();
                    if (userRequiredQuantity <= availableQuantity) {
                        String status = "Sent";
                        String msg = msgTxt.getText();
                        loc = (String) locationJTable.getValueAt(selectedRow, 0);
                        String bloodType = (String) locationJTable.getValueAt(selectedRow, 2);

                        BloodBankAssistantWorkRequest request = new BloodBankAssistantWorkRequest();
                        request.setMessage(msg);
                        request.setSender(userAccount);
                        request.setStatus(status);
                        request.setBloodType(bloodType);
                        request.setLocation(loc);
                        request.setBloodBankQuantity(userRequiredQuantity);

                        count = 0;
                        for (Network network : system.getNetworkList()) {
                            for (Enterprise enterprise : network.getEnterpriseList().getEnterpriseList()) {
                                if (enterprise instanceof BloodEnterprise) {
                                    count++;
                                    break;
                                }
                            }

                        }
                        if (count > 0) {

                            system.getWorkQueue().getWorkRequestList().add(request);
                            userAccount.getWorkQueue().getWorkRequestList().add(request);
                            JOptionPane.showMessageDialog(null, "Your request has been submitted");

                        }
                    } else if (availableQuantity != 0 && userRequiredQuantity > availableQuantity) {
                        if (availableNetworkForO.size() > 0) {

                            for (Map.Entry<String, Integer> me : set1) {
                                if (me.getKey().equalsIgnoreCase(loc)) {
                                    int selectedOption = JOptionPane.showConfirmDialog(null, "Sorry we are short of quantity you required, Do you want blood in emergency?");
                                    if (selectedOption == JOptionPane.YES_OPTION) {

                                        emergencyButton.setEnabled(true);
                                        submitBtn.setEnabled(false);
                                        JOptionPane.showMessageDialog(null, "Please select emergency option");
                                    } else if (selectedOption == JOptionPane.NO_OPTION) {
                                        int selectedOption1 = JOptionPane.showConfirmDialog(null, "Would you like to collected available quantity?");
                                        if (selectedOption1 == JOptionPane.YES_OPTION) {
                                            //enter code to create work request
                                            String status = "Sent";
                                            String msg = msgTxt.getText();
                                            loc = (String) locationJTable.getValueAt(selectedRow, 0);
                                            String bloodType = (String) locationJTable.getValueAt(selectedRow, 2);

                                            BloodBankAssistantWorkRequest request = new BloodBankAssistantWorkRequest();
                                            request.setMessage(msg);
                                            request.setSender(userAccount);
                                            request.setStatus(status);
                                            request.setBloodType(bloodType);
                                            request.setLocation(loc);
                                            request.setBloodBankQuantity(availableQuantity);

                                            count = 0;
                                            for (Network network : system.getNetworkList()) {
                                                for (Enterprise enterprise : network.getEnterpriseList().getEnterpriseList()) {
                                                    if (enterprise instanceof BloodEnterprise) {
                                                        count++;
                                                        break;
                                                    }
                                                }

                                            }
                                            if (count > 0) {

                                                system.getWorkQueue().getWorkRequestList().add(request);
                                                userAccount.getWorkQueue().getWorkRequestList().add(request);
                                                JOptionPane.showMessageDialog(null, "Your request has been submitted");

                                            }
                                        }
                                    }

                                }
                            }
                        } else {
                            int selectedOption = JOptionPane.showConfirmDialog(null, "Sorry we are short of required quantity, Would you like to collect available quantity");
                            if (selectedOption == JOptionPane.YES_OPTION) {
                                //enter code to create work request
                                String status = "Sent";
                                String msg = msgTxt.getText();
                                loc = (String) locationJTable.getValueAt(selectedRow, 0);
                                String bloodType = (String) locationJTable.getValueAt(selectedRow, 2);

                                BloodBankAssistantWorkRequest request = new BloodBankAssistantWorkRequest();
                                request.setMessage(msg);
                                request.setSender(userAccount);
                                request.setStatus(status);
                                request.setBloodType(bloodType);
                                request.setLocation(loc);
                                request.setBloodBankQuantity(availableQuantity);

                                count = 0;
                                for (Network network : system.getNetworkList()) {
                                    for (Enterprise enterprise : network.getEnterpriseList().getEnterpriseList()) {
                                        if (enterprise instanceof BloodEnterprise) {
                                            count++;
                                            break;
                                        }
                                    }

                                }
                                if (count > 0) {

                                    system.getWorkQueue().getWorkRequestList().add(request);
                                    userAccount.getWorkQueue().getWorkRequestList().add(request);
                                    JOptionPane.showMessageDialog(null, "Your request has been submitted");

                                }
                            }
                        }
                    } else if (availableQuantity == 0 && availableNetworkForO.size() > 0) {

                        for (Map.Entry<String, Integer> me : set1) {
                            if (me.getKey().equalsIgnoreCase(loc)) {
                                JOptionPane.showMessageDialog(null, "You can Opt for our emergency blood supply where you can recieve O-");
                                emergencyButton.setEnabled(true);
                                submitBtn.setEnabled(false);
                            }
                        }
                    }

                } else {
                    JOptionPane.showMessageDialog(null, "Sorry you cannot buy more than 2 bottles of blood");
                }
            }
        }

    }//GEN-LAST:event_submitBtnActionPerformed

    private void bloodGroupComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bloodGroupComboBoxActionPerformed
        // TODO add your handling code here:
        String selectedBoodGroup = (String) bloodGroupComboBox.getSelectedItem();
        populateTableByBloodGroup(selectedBoodGroup);

    }//GEN-LAST:event_bloodGroupComboBoxActionPerformed

    private void searchBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchBtnActionPerformed
        // TODO add your handling code here:
        // TODO add your handling code here:
        String curLatitude = null, curLongitude = null;
        double distance;
        String location = locationTxt.getText();
        if (location.equalsIgnoreCase("")) {
            JOptionPane.showMessageDialog(null, "Please enter your address");
            return;
        } else {
            GoogleResponse res;
            try {
                res = convertToLatLong(location);
                if (res.getStatus().equals("OK")) {
                    for (Result result : res.getResults()) {

                        curLatitude = result.getGeometry().getLocation().getLat();
                        curLongitude = result.getGeometry().getLocation().getLng();
                        /* System.out.println("Lattitude of address is :"  +result.getGeometry().getLocation().getLat());
    System.out.println("Longitude of address is :" + result.getGeometry().getLocation().getLng());
    System.out.println("Location is " + result.getGeometry().getLocation_type());*/
                    }
                    distanceDirectory = new DistanceDirectory();
                    for (Network network : system.getNetworkList()) {

                        String latitude = network.getNetworkAddress().getLatitude();
                        String longitude = network.getNetworkAddress().getLongitude();

                        distance = distance(Double.parseDouble(curLatitude), Double.parseDouble(curLongitude), Double.parseDouble(latitude), Double.parseDouble(longitude), "M");
                        Distance dist = distanceDirectory.addDistance();
                        dist.setLocation(network.getNetworkAddress().getAddress());
                        dist.setDistance(distance);

                    }

                    //Collections.sort(enterprise.getDistanceDirectory().getDistanceDirectory(),new Distance());
                    Collections.sort(distanceDirectory.getDistanceDirectory(), new Comparator<Distance>() {
                        @Override
                        public int compare(Distance o1, Distance o2) {
                            return new Double(o1.getDistance()).compareTo(o2.getDistance());
                        }
                    });

                    try {
                        String latitude = curLatitude;
                        String longitude = curLongitude;

                        String imageUrl = "https://maps.googleapis.com/maps/api/staticmap?size=700x700&scale=2&maptype=roadmap";

                        for (Network network : system.getNetworkList()) {
                            String[] fruits = {"blue", "green", "red", "yellow", "pink"};
                            String random = (fruits[new Random().nextInt(fruits.length)]);
                            imageUrl = imageUrl + "&markers=size:mid%7Ccolor:" + random + "%7Clabel:S%7C" + network.getNetworkAddress().getLatitude() + "," + network.getNetworkAddress().getLongitude();

                        }

//imageUrl=url1;
                        String destinationFile = "image.jpg";
// read the map image from Google
// then save it to a local file: image.jpg
//
                        URL url = new URL(imageUrl);
                        InputStream is = url.openStream();
                        OutputStream os = new FileOutputStream(destinationFile);
                        byte[] b = new byte[2048];
                        int length;
                        while ((length = is.read(b)) != -1) {
                            os.write(b, 0, length);
                        }
                        is.close();
                        os.close();
                    } catch (IOException e) {
                        e.printStackTrace();
                        System.exit(1);
                    }
// create a GUI component that loads the image: image.jpg
//
                    ImageIcon imageIcon = new ImageIcon((new ImageIcon("image.jpg"))
                            .getImage().getScaledInstance(630, 600,
                                    java.awt.Image.SCALE_SMOOTH));
                    locationImg.setIcon(imageIcon);
// show the GUI window

                    populateTable(bloodGroupComboBox.getSelectedItem().toString());
                } else {
                    JOptionPane.showMessageDialog(null, "Please enter a valid address");
                    System.out.println(res.getStatus());

                }

            } catch (IOException ex) {
                Logger.getLogger(DonationWorkRequestJPanel.class
                        .getName()).log(Level.SEVERE, null, ex);
            }
        }

    }//GEN-LAST:event_searchBtnActionPerformed

    private void emergencyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_emergencyButtonActionPerformed
        // TODO add your handling code here:
        int availableOquantity = 0;
        HashMap<String, Integer> availableNetworkForO = new HashMap<>();
        int selectedRow = locationJTable.getSelectedRow();

//            //String bloodType = (String) locationJTable.getValueAt(selectedRow, 2);
//            int availableQuantity = (Integer) locationJTable.getValueAt(selectedRow, 4);
        String loc = (String) locationJTable.getValueAt(selectedRow, 0);
        int userRequiredQuantity = Integer.parseInt(quantityTxt.getText());
        for (Network network : system.getNetworkList()) {
            availableOquantity = 0;
            for (BloodSpecification bs : network.getBloodBank().getBloodList()) {
                if (bs.getBloodGroup().equalsIgnoreCase("O-")) {
                    availableOquantity++;
                }
            }
            if (availableOquantity >= 1) {
                availableNetworkForO.put(network.getNetworkAddress().getAddress(), availableOquantity);
            }
        }

        Set<Map.Entry<String, Integer>> set1 = availableNetworkForO.entrySet();
        for (Map.Entry<String, Integer> me : set1) {
            if (me.getKey().equalsIgnoreCase(loc)) {

                String status = "Sent";
                String msg = msgTxt.getText();
                loc = (String) locationJTable.getValueAt(selectedRow, 0);
                String bloodType = (String) locationJTable.getValueAt(selectedRow, 2);

                BloodBankAssistantWorkRequest request = new BloodBankAssistantWorkRequest();
                request.setMessage(msg);
                request.setSender(userAccount);
                request.setStatus(status);
                request.setBloodType(bloodType);
                request.setLocation(loc);
                if (userRequiredQuantity <= me.getValue()) {
                    request.setBloodBankQuantity(userRequiredQuantity);
                } else {
                    request.setBloodBankQuantity(me.getValue());
                }

                count = 0;
                for (Network network : system.getNetworkList()) {
                    for (Enterprise enterprise : network.getEnterpriseList().getEnterpriseList()) {
                        if (enterprise instanceof BloodEnterprise) {
                            count++;
                            break;
                        }
                    }

                }
                if (count > 0) {

                    system.getWorkQueue().getWorkRequestList().add(request);
                    userAccount.getWorkQueue().getWorkRequestList().add(request);
                    JOptionPane.showMessageDialog(null, "Your request has been submitted");

                }
            }
        }

    }//GEN-LAST:event_emergencyButtonActionPerformed

    private void populateTable(String s) {
        DefaultTableModel model = (DefaultTableModel) locationJTable.getModel();
        boolean isPrinted = false;
        int quantity = 0;
        model.setRowCount(0);

        for (Distance dist : distanceDirectory.getDistanceDirectory()) {
            isPrinted = false;
            quantity = 0;
            for (Network network : system.getNetworkList()) {
                if (dist.getLocation().equalsIgnoreCase(network.getNetworkAddress().getAddress())) {
                    for (BloodSpecification bloodSpecification : network.getBloodBank().getBloodList()) {
                        if (bloodSpecification.getBloodGroup().equals(s)) {
                            quantity = quantity + bloodSpecification.getQuantity();
                        }
                    }
                    for (BloodSpecification bloodSpecification : network.getBloodBank().getBloodList()) {
                        if (!isPrinted) {
                            if (bloodSpecification.getBloodGroup().equals(s)) {
                                Object[] row = new Object[5];
                                row[0] = network.getNetworkAddress().getAddress();
                                row[1] = dist.getDistance();
                                row[2] = s;
                                row[3] = quantity> 0 ? quantity : 0;
                                row[4] = quantity > 0 ? "YES" : "NO";
                                model.addRow(row);
                                isPrinted = true;
                            }
                        }

                    }
                }
            }
        }

    }

    private void populateTableByBloodGroup(String s) {
        DefaultTableModel model = (DefaultTableModel) locationJTable.getModel();

        int quantity = 0;
        boolean isPrinted = false;
        model.setRowCount(0);

        for (Network network : system.getNetworkList()) {
            isPrinted = false;
            quantity = 0;
            if (network.getBloodBank() == null) {
                network.setBloodBank(new BloodBank());
            }
            for (BloodSpecification bloodSpecification : network.getBloodBank().getBloodList()) {
                if (bloodSpecification.getBloodGroup().equals(s)) {
                    quantity = quantity + bloodSpecification.getQuantity();
                }

            }
            for (BloodSpecification bloodSpecification : network.getBloodBank().getBloodList()) {
                if (!isPrinted) {
                    if (bloodSpecification.getBloodGroup().equals(s)) {
                        Object[] row = new Object[5];
                        row[0] = network.getNetworkAddress().getAddress();
                        row[2] = s;
                        row[3] = quantity > 0 ? quantity : 0;
                        row[4] = quantity > 0 ? "YES" : "NO";
                        model.addRow(row);
                        isPrinted = true;
                    }
                }

            }

        }

    }

    public GoogleResponse convertToLatLong(String fullAddress) throws IOException {

        /*
   * Create an java.net.URL object by passing the request URL in
   * constructor. Here you can see I am converting the fullAddress String
   * in UTF-8 format. You will get Exception if you don't convert your
   * address in UTF-8 format. Perhaps google loves UTF-8 format. :) In
   * parameter we also need to pass "sensor" parameter. sensor (required
   * parameter) — Indicates whether or not the geocoding request comes
   * from a device with a location sensor. This value must be either true
   * or false.
         */
        String URL = "https://maps.googleapis.com/maps/api/geocode/json";
        URL url = new URL(URL + "?address="
                + URLEncoder.encode(fullAddress, "UTF-8") + "&sensor=false");
        // Open the Connection
        URLConnection conn = url.openConnection();

        InputStream in = conn.getInputStream();
        ObjectMapper mapper = new ObjectMapper();
        GoogleResponse response = (GoogleResponse) mapper.readValue(in, GoogleResponse.class
        );
        in.close();
        return response;

    }

    private double distance(double lat1, double lon1, double lat2, double lon2, String unit) {
        double theta = lon1 - lon2;
        double dist = Math.sin(deg2rad(lat1)) * Math.sin(deg2rad(lat2)) + Math.cos(deg2rad(lat1)) * Math.cos(deg2rad(lat2)) * Math.cos(deg2rad(theta));
        dist = Math.acos(dist);
        dist = rad2deg(dist);
        dist = dist * 60 * 1.1515;
        if (unit == "K") {
            dist = dist * 1.609344;
        } else if (unit == "N") {
            dist = dist * 0.8684;
        }

        return (dist);
    }

    /*:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::*/
 /*::	This function converts decimal degrees to radians						 :*/
 /*:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::*/
    private double deg2rad(double deg) {
        return (deg * Math.PI / 180.0);
    }

    /*:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::*/
 /*::	This function converts radians to decimal degrees						 :*/
 /*:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::*/
    private double rad2deg(double rad) {
        return (rad * 180 / Math.PI);
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> bloodGroupComboBox;
    private javax.swing.JButton emergencyButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel locationImg;
    private javax.swing.JTable locationJTable;
    private javax.swing.JTextField locationTxt;
    private javax.swing.JTextField msgTxt;
    private javax.swing.JTextField quantityTxt;
    private javax.swing.JLabel receiverTitleLabel;
    private javax.swing.JButton searchBtn;
    private javax.swing.JButton submitBtn;
    // End of variables declaration//GEN-END:variables

}
