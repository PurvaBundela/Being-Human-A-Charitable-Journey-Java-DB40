/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userInterface.PCEmployee;

import Business.EcoSystem;
import Business.Enterprise.Enterprise;
import Business.Network.Network;
import Business.Organization.Organization;
import Business.PlasticConservation.PCEmployeeOrganization;
import Business.PlasticConservation.RecyclingTeamOrganization;
import Business.SendEmail.SendMail;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.PCWorkRequest;
import Business.WorkQueue.RecyclingTeamWorkRequest;
import Business.WorkQueue.WorkRequest;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Tejesh
 */
public class PCEmployeeWorkAreaJPanel extends javax.swing.JPanel {

    JPanel userProcessContainer;
    Enterprise enterprise;
    UserAccount userAccount;
    PCEmployeeOrganization pcEmployeeOrganization;
    EcoSystem ecosystem;

    public PCEmployeeWorkAreaJPanel(JPanel userProcessContainer, UserAccount account, Organization organization, Enterprise enterprise, EcoSystem business) {
        initComponents();

        this.userProcessContainer = userProcessContainer;
        this.userAccount = account;
        this.enterprise = enterprise;
        this.pcEmployeeOrganization = (PCEmployeeOrganization) organization;
        this.ecosystem = business;

        populatePCTable();
    }

    public void populatePCTable() {

        DefaultTableModel model = (DefaultTableModel) plasticCollectorJTable.getModel();

        model.setRowCount(0);

        for (WorkRequest request : ecosystem.getWorkQueue().getWorkRequestList()) {
            if (request instanceof PCWorkRequest) {
                PCWorkRequest req = (PCWorkRequest) request;
                Object[] row = new Object[6];
                row[0] = req;
                row[1] = req.getSender().getPerson().getName();
                row[2] = req.getLocation();
                row[3] = req.getZipcode();
                row[4] = req.getStatus();
                row[5] = req.getReceiver() == null ? null : request.getReceiver().getPerson().getName();

                model.addRow(row);
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        plasticCollectorJTable = new javax.swing.JTable();
        assignToPCBtn = new javax.swing.JButton();
        collectedBtn = new javax.swing.JButton();
        deliverToRecyclingTeamBtn = new javax.swing.JButton();
        timerLbl = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 255, 255));

        plasticCollectorJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "UserName", "Location", "User Zipcode", "Status", "FCEmp"
            }
        ));
        jScrollPane1.setViewportView(plasticCollectorJTable);

        assignToPCBtn.setBackground(new java.awt.Color(255, 102, 102));
        assignToPCBtn.setText("Assign to Me");
        assignToPCBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                assignToPCBtnActionPerformed(evt);
            }
        });

        collectedBtn.setBackground(new java.awt.Color(255, 102, 102));
        collectedBtn.setText("Collected");
        collectedBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                collectedBtnActionPerformed(evt);
            }
        });

        deliverToRecyclingTeamBtn.setBackground(new java.awt.Color(255, 102, 102));
        deliverToRecyclingTeamBtn.setText("Deliver to Recycling Team");
        deliverToRecyclingTeamBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deliverToRecyclingTeamBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(124, 124, 124)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(38, 38, 38)
                                .addComponent(timerLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(110, 110, 110)
                                .addComponent(assignToPCBtn)
                                .addGap(56, 56, 56)
                                .addComponent(collectedBtn))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(269, 269, 269)
                        .addComponent(deliverToRecyclingTeamBtn)))
                .addContainerGap(23, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(timerLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(41, 41, 41)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(assignToPCBtn)
                    .addComponent(collectedBtn))
                .addGap(35, 35, 35)
                .addComponent(deliverToRecyclingTeamBtn)
                .addContainerGap(225, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void assignToPCBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_assignToPCBtnActionPerformed
        // TODO add your handling code here:    

        int selectedRow = plasticCollectorJTable.getSelectedRow();

        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please select the request to assign it to yourself.");
        } else {
            PCWorkRequest request = (PCWorkRequest) plasticCollectorJTable.getValueAt(selectedRow, 0);
            if (request.getReceiver() == null) {
                request.setReceiver(userAccount);
                request.setStatus("Pending");
                populatePCTable();
            } else {
                JOptionPane.showMessageDialog(null, "This request is already assigned to other employee");
            }
        }
    }//GEN-LAST:event_assignToPCBtnActionPerformed

    private void collectedBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_collectedBtnActionPerformed
        // TODO add your handling code here:

        int selectedRow = plasticCollectorJTable.getSelectedRow();

        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please select the row to proceed.");
        } else {

            PCWorkRequest request = (PCWorkRequest) plasticCollectorJTable.getValueAt(selectedRow, 0);
            if (request.getReceiver() == userAccount && request.getStatus().equalsIgnoreCase("Pending")) {
                request.setStatus("Collected");
                request.setResult("Completed");
                populatePCTable();

                SendMail sendmail = new SendMail();

                sendmail.pcSendMail(request.getSender().getPerson().getEmailID(), request.getLocation());
                JOptionPane.showMessageDialog(null, "Plastic Collected. User will get a confirmation mail. ");
                request.setResolveDate(new Date());
            } else {
                JOptionPane.showMessageDialog(null, "This request does not belong to you or is already collected. Please collect the appropriate request from the queue.");
            }
        }
    }//GEN-LAST:event_collectedBtnActionPerformed

    private void deliverToRecyclingTeamBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deliverToRecyclingTeamBtnActionPerformed
        // TODO add your handling code here:

        int selectedRow = plasticCollectorJTable.getSelectedRow();
        int count = 0;

        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please select a row to forward the work request to Recycling Team");
        } else {

            PCWorkRequest request = (PCWorkRequest) plasticCollectorJTable.getValueAt(selectedRow, 0);

            RecyclingTeamWorkRequest recTeamRequest = new RecyclingTeamWorkRequest();
            if (request.getReceiver() == userAccount && request.getStatus().equalsIgnoreCase("Collected")) {
                String location = request.getLocation();
                String status = "Sent";
                recTeamRequest.setMessage(request.getMessage());
                recTeamRequest.setLocation(location);
                recTeamRequest.setSender(request.getReceiver());
                recTeamRequest.setStatus(status);

                for (Network network : ecosystem.getNetworkList()) {
                    for (Enterprise enterprise : network.getEnterpriseList().getEnterpriseList()) {
                        for (Organization organization : enterprise.getOrganizationDirectory().getOrganizationList()) {
                            if (organization instanceof RecyclingTeamOrganization) {
                                //org = organization;
                                count++;
                                break;

                            }
                        }
                    }
                }
            } else {
                JOptionPane.showMessageDialog(null, "You are not authorized to forward this work request to Orphanage");

            }
            if (count > 0) {

                //org.getWorkQueue().getWorkRequestList().add(request);
                ecosystem.getWorkQueue().getWorkRequestList().add(recTeamRequest);
                userAccount.getWorkQueue().getWorkRequestList().add(recTeamRequest);
                JOptionPane.showMessageDialog(null, "The request has been forwarded to the Recycling Team Organization.");
            }
    }//GEN-LAST:event_deliverToRecyclingTeamBtnActionPerformed

    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton assignToPCBtn;
    private javax.swing.JButton collectedBtn;
    private javax.swing.JButton deliverToRecyclingTeamBtn;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable plasticCollectorJTable;
    private javax.swing.JLabel timerLbl;
    // End of variables declaration//GEN-END:variables
}
